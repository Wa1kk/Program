–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –Ω–∞ Pascal, –≥–¥–µ —á–∏—Å–ª–∞, –ø–µ—Ä–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ, –≤—Ç–æ—Ä–æ–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —è–≤–ª—è—é—Ç—Å—è –æ–±—ä–µ–∫—Ç–∞–º–∏:

program Calculator;

type
  TNumber = class
  private
    value: Double;
  public
    constructor Create(a: Double);
    function GetValue: Double;
    procedure SetValue(a: Double);
  end;

constructor TNumber.Create(a: Double);
begin
  value := a;
end;

function TNumber.GetValue: Double;
begin
  Result := value;
end;

procedure TNumber.SetValue(a: Double);
begin
  value := a;
end;

type
  TCalculator = class
  private
    num1, num2, result: TNumber;
  public
    constructor Create(a, b: TNumber);
    function Add: TNumber;
    function Subtract: TNumber;
    function Multiply: TNumber;
    function Divide: TNumber;
  end;

constructor TCalculator.Create(a, b: TNumber);
begin
  num1 := a;
  num2 := b;
  result := TNumber.Create(0);
end;

function TCalculator.Add: TNumber;
begin
  result.SetValue(num1.GetValue + num2.GetValue);
  Result := result;
end;

function TCalculator.Subtract: TNumber;
begin
  result.SetValue(num1.GetValue - num2.GetValue);
  Result := result;
end;

function TCalculator.Multiply: TNumber;
begin
  result.SetValue(num1.GetValue * num2.GetValue);
  Result := result;
end;

function TCalculator.Divide: TNumber;
begin
  if num2.GetValue <> 0 then
    result.SetValue(num1.GetValue / num2.GetValue)
  else
    result.SetValue(0);
  Result := result;
end;

var
  num1, num2, result: TNumber;
  a, b: Double;
  calculator: TCalculator;

begin
  Write('–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: ');
  ReadLn(a);
  num1 := TNumber.Create(a);

  Write('–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: ');
  ReadLn(b);
  num2 := TNumber.Create(b);

  calculator := TCalculator.Create(num1, num2);

  result := calculator.Add;
  WriteLn('–°–ª–æ–∂–µ–Ω–∏–µ: ', result.GetValue:0:2);

  result := calculator.Subtract;
  WriteLn('–í—ã—á–∏—Ç–∞–Ω–∏–µ: ', result.GetValue:0:2);

  result := calculator.Multiply;
  WriteLn('–£–º–Ω–æ–∂–µ–Ω–∏–µ: ', result.GetValue:0:2);

  result := calculator.Divide;
  WriteLn('–î–µ–ª–µ–Ω–∏–µ: ', result.GetValue:0:2);

  ReadLn;
end.


–í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ —á–∏—Å–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞–º–∏ –∫–ª–∞—Å—Å–∞ TNumber. –ö–ª–∞—Å—Å TNumber –∏–º–µ–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ value –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –º–µ—Ç–æ–¥—ã GetValue –∏ SetValue –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è.

–ö–ª–∞—Å—Å TCalculator —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç—ã num1, num2 –∏ result —Ç–∏–ø–∞ TNumber. –ú–µ—Ç–æ–¥—ã Add, Subtract, Multiply –∏ Divide –≤—ã–ø–æ–ª–Ω—è—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤ num1 –∏ num2, –∞ –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–±—ä–µ–∫—Ç result —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.

–í –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–≤–∞ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ num1 –∏ num2. –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç calculator, –∏ –º–µ—Ç–æ–¥—ã Add, Subtract, Multiply –∏ Divide –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–≤–æ–¥—è—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω.

–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –º–Ω–µ –∑–Ω–∞—Ç—å. üòâ
